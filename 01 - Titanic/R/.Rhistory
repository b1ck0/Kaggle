FOrestModel.pred = predict(ForestModel, newdata = test)
a = table(test$isB, FOrestModel.pred)
TP = a[2,2]
TN = a[1,1]
FP = a[1,2]
FN = a[2,1]
(TP+TN)/(TP+TN+FP+FN) #accuracy
letters$letter = as.factor( letters$letter )
section2 = sample.split(letters$letter, SplitRatio = 0.5)
letters$letter = as.factor( letters$letter )
set.seed(2000)
section2 = sample.split(letters$letter, SplitRatio = 0.5)
train2 = subset(letters, section2 == TRUE)
test2 = subset(letters, section2 == FALSE)
table(test2$letter)
401/(395+383+401+379)
CART1 = rpart(letter ~ . - isB, data = train, method = class)
CART1 = rpart(letter ~ . - isB, data = train2, method = class)
CART1 = rpart(letter ~ . - isB, data=train, method="class")
CART1.pred = predict(CART1, newdata = test2, type ="class")
table(test2$letter, CART1.pred)
(a[1,1+a[2,2]+a[3,3]+a[4,4])/(sum(a)) #accuracy
(a[1,1]+a[2,2]+a[3,3]+a[4,4])/(sum(a)) #accuracy
a = table(test2$letter, CART1.pred)
(a[1,1]+a[2,2]+a[3,3]+a[4,4])/(sum(a)) #accuracy
CART1 = rpart(letter ~ . - isB, data=train2, method="class")
CART1.pred = predict(CART1, newdata = test2, type ="class")
a = table(test2$letter, CART1.pred)
(a[1,1]+a[2,2]+a[3,3]+a[4,4])/(sum(a)) #accuracy
ForestModel2 = randomForest(letter ~ . - isB, data=train2)
ForestModel2.pred = predict(ForestModel2, newdata = test2)
a = table(test2$letter, ForestModel2.pred)
(a[1,1]+a[2,2]+a[3,3]+a[4,4])/(sum(a)) #accuracy
set.seed(1000)
ForestModel2 = randomForest(letter ~ . - isB, data=train2)
ForestModel2.pred = predict(ForestModel2, newdata = test2)
a = table(test2$letter, ForestModel2.pred)
(a[1,1]+a[2,2]+a[3,3]+a[4,4])/(sum(a)) #accuracy
census = read.csv("census.csv")
set.seed(2000)
library(caTools)
set.seed(2000)
section = sample.split(census, SplitRatio = 0.6)
section
section = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, section == TRUE)
census = read.csv("census.csv")
library(caTools)
set.seed(2000)
section = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, section == TRUE)
test = subset(census, section == FALSE)
LogModel1 = glm(over50k ~ .,data = train, family = binomial)
summary(LogModel1)
LogModel1.pred = predict(LogModel1, newdata = test, type = "response")
table(test$over50k, LogModel1.pred)
LogModel1.pred = predict(LogModel1, newdata = test, type = "response")
table(test$over50k, LogModel1.pred)
head(test)
View(census)
table(test$over50k, LogModel1.pred >= 0.5)
a = table(test$over50k, LogModel1.pred >= 0.5)
(a[1,1]+a[2,2])/sum(a)
table(test$over50k)
9713/nrow(test)
library(ROCR)
ROCRpred = predict(LogModel1, newdata = test)
ROCRpred.perf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRpred.perf)
ROCRpred = predict(LogModel1, newdata = test)
ROCRpred.perf = performance(ROCRpred, "tpr", "fpr")
ROCRpred = prediction(LogModel1, newdata = test)
ROCRpred.perf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRpred.perf)
ROCRpred = prediction(LogModel1, test$over50k)
ROCRpred.perf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRpred.perf)
as.numeric(performance(pred, "auc")@y.values)
ROCRpred = prediction(LogModel1.pred, test$over50k)
ROCRpred.perf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRpred.perf)
as.numeric(performance(pred, "auc")@y.values)
as.numeric(performance(ROCRpred, "auc")@y.values)
Tree1 = rpart(over50k ~ .,data=train, method="class")
prp(Tree1)
Tree1.pred = predict(Tree1, newdata = test, type = "class")
table(test$over50k, Tree1.pred)
a = table(test$over50k, Tree1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
Tree1.pred = predict(Tree1, newdata = test)
ROCRpred2 = prediction(Tree1.pred, test$over50k)
ROCRpred2.perf = performance(ROCRpred2, "tpr", "fpr")
plot(ROCRpred.perf)
as.numeric(performance(ROCRpred2, "auc")@y.values)
ROCRpred2 = prediction(Tree1.pred, test$over50k)
ROCRpred2.perf = performance(ROCRpred2, "tpr", "fpr")
plot(ROCRpred.perf)
as.numeric(performance(ROCRpred2, "auc")@y.values)
Tree1.pred = predict(Tree1, newdata = test)
ROCRpred2 = prediction(Tree1.pred, test$over50k)
Tree1.pred
ROCRpred2 = prediction(Tree1.pred, test$over50k)
ROCRpred2 = prediction(Tree1.pred, test$over50k)
ROCRpred2 = prediction(Tree1.pred[,2], test$over50k)
ROCRpred2.perf = performance(ROCRpred2, "tpr", "fpr")
plot(ROCRpred.perf)
as.numeric(performance(ROCRpred2, "auc")@y.values)
plot(ROCRpred.perf)
plot(ROCRpred.perf)
plot(ROCRpred2.perf)
ggplot() +
geom_line(data = ROCRpred2.perf)
plot(ROCRpred2.perf)
as.numeric(performance(ROCRpred2, "auc")@y.values)
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
set.seed(1)
Forest1 = randomForest(over50k ~ .,data=train)
set.seed(1)
Forest1 = randomForest(over50k ~ .,data=trainSmall)
Forest1.pred = predict(Forest1, newdata = test)
table(test$over50k, Forest1.pred >= 0.5)
table(test$over50k, Forest1.pred >= 0.5)
Forest1.pred = predict(Forest1, newdata = test)
table(test$over50k, Forest1.pred >= 0.5)
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
set.seed(1)
Forest1 = randomForest(over50k ~ .,data=trainSmall)
Forest1.pred = predict(Forest1, newdata = test)
table(test$over50k, Forest1.pred >= 0.5)
Forest1.pred
table(test$over50k, Forest1.pred)
a = table(test$over50k, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
library(ggplot2)
geom_dotplot(mapping = aes(y = vusorted$x, x = names(Forest1$forest$xlevels[vusorted$ix]))
names(Forest1$forest$xlevels[vusorted$ix])
geom_dotplot(mapping = aes(y = vusorted$x, x = names(Forest1$forest$xlevels[vusorted$ix])))
ggplot() + geom_dotplot(mapping = aes(y = vusorted$x, x = names(Forest1$forest$xlevels[vusorted$ix])))
ggplot() + geom_dotplot(mapping = aes(y = vusorted$x, x = names(Forest1$forest$xlevels[vusorted$ix])), binwidth = 30)
ggplot() + geom_dotplot(mapping = aes(y = vusorted$x, x = names(Forest1$forest$xlevels[vusorted$ix])), binwidth = 300)
ggplot() + geom_dotplot(mapping = aes(y = vusorted$x, x = names(Forest1$forest$xlevels[vusorted$ix])), binwidth = 0.1)
ggplot() + geom_dotplot(mapping = aes(y = vusorted$x, x = names(Forest1$forest$xlevels[vusorted$ix])), binwidth = 0.001)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
ggplot() + geom_dotplot(mapping = aes(x = names(Forest1$forest$xlevels[vusorted$ix]), y = vusorted$x), binwidth = 0.001)
vusorted$x
ggplot() + geom_point(mapping = aes(x = names(Forest1$forest$xlevels[vusorted$ix]), y = vusorted$x), binwidth = 0.001)
ggplot() + geom_point(mapping = aes(x = names(Forest1$forest$xlevels[vusorted$ix]), y = vusorted$x))
Forest1$forest$xlevels[vusorted$ix]
ggplot() + geom_point(mapping = aes(x = names(Forest1$forest$xlevels[vusorted$ix]), y = vusorted$x)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x)) +
theme(axis.text.y = element_text(angle = 90, hjust = 1))
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x)) +
theme(axis.text.y = element_text(angle = 90, vjust = 1))
library(ggplot2)
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x)) +
theme(axis.text.y = element_text(angle = 90, vjust = 1))
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x)) +
theme(axis.text.x=element_text(angle = -90, hjust = 0))
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x)) +
theme(axis.text.y=element_text(angle = -90, hjust = 0))
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x)) +
theme(axis.text.x=element_text(angle = -90, hjust = 0))
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x))
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x))
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
ggplot() +
geom_point(mapping = aes(y = names(Forest1$forest$xlevels[vusorted$ix]), x = vusorted$x))
varImpPlot(Forest1)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
set.seed(2)
numFolds = trainControl(number = 50 )
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k ~ ., data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
train(over50k ~ ., data = train, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
Tree2 = rpart(over50k ~ .,data=train, method = "class")
prp(Tree2)
Tree2.pred = predict(Tree2, newdata = test, type = "class")
a = table(test$over50k, Tree1.pred)
a = table(test$over50k, Tree2.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
Tree2 = rpart(over50k ~ .,data=train, method = "class", cp = 0.002)
prp(Tree2)
Tree2.pred = predict(Tree2, newdata = test, type = "class")
a = table(test$over50k, Tree2.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
setwd("~/GitHub/Kaggle/01 - Titanic")
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
str(train)
full = rbind(train,test)
library(randomForest)
library(ROCR)
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = train, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
?train
train = impute(mice(train, m=5, maxit=50, method='pmm', seed=500))
library(mice)
train = impute(mice(train, m=5, maxit=50, method='pmm', seed=500))
train = read.csv("train.csv", stringsAsFactors = F)
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
temp = impute(mice(train, m=5, maxit=50, method='pmm', seed=500))
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = train, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = train, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
train(Survived ~ ., data = temp, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
temp = impute(mice(train, m=5, maxit=50, method='pmm', seed=500))
temp = impute(mice(train, m=5, maxit=50, method='pmm', seed=1))
temp = impute(mice(train, m=5, maxit=10, method='pmm', seed=1))
library(caret)
temp = impute(mice(train, m = 5, maxit = 10, method = 'pmm', seed=1))
library(e1071)
temp = impute(mice(train, m = 5, maxit = 10, method = 'pmm', seed=1))
temp = impute(mice(train, m = 5, maxit = 10, method = 'nnet', seed=1))
temp = impute(mice(train, m = 5, maxit = 10, method = 'parRF', seed=1))
temp = impute(mice(train, m = 5, maxit = 10, method = 'pmm', seed=1))
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
temp = impute(mice(train, m = 5, maxit = 10, method = 'pmm', seed=1))
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = temp, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
train = read.csv("train.csv")
test = read.csv("test.csv")
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
temp = impute(mice(train, m = 5, maxit = 10, method = 'pmm', seed=1))
as
asd
stringsAsFactors = F
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
temp = impute(mice(train, m = 5, maxit = 10, method = 'pmm', seed=1))
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = temp, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
temp = impute(mice(train, m = 5, maxit = 10, method = 'pmm', seed=1))
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = temp, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
temp = impute(mice(train, m = 5, maxit = 5, method = 'pmm', seed=1))
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = temp, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
temp = impute(mice(train, m = 5, maxit = 50, method = 'pmm', seed=1))
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = temp, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
str(train)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
numFolds = trainControl(number = 50)
cartGrid = expand.grid(.cp = seq(0.001,1,0.001))
train(Survived ~ ., data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
train(Survived ~ . - PassengerId, data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
cartGrid = expand.grid(.cp = seq(0.001,0.3,0.001))
train(Survived ~ . - PassengerId, data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
cartGrid = expand.grid(.cp = seq(0.01,0.3,0.01))
train(Survived ~ . - PassengerId, data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
View(train)
Forest1 = randomForest(Survived ~ Age + Sex + Sibsp + Parch + Fare, data = imputed)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
imputed
str(imputed)
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
str(imputed)
imputed$Survived = as.factor(imputed$Survived)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
imputed$Survived = as.factor(imputed$Survived)
imputed$Sex = as.factor(imputed$Sex)
imputed$Survived = as.factor(imputed$Survived)
imputed$Sex = as.factor(imputed$Sex)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
Forest1.pred = predict(Forest1)
table(imputed$Survived, Forest1.pred)
summary(Forest1)
varImpPlot(Forest1)
a = table(imputed$Survived, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
summary(imputed)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
Forest1.pred = predict(Forest1)
a = table(imputed$Survived, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
varImpPlot(Forest1)
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
hist(imputed$Fare)
table(imputed$Fare, imputed$Cabin)
table(imputed$Fare, imputed$Sex)
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
imputed$Survived = as.factor(imputed$Survived)
imputed$Sex = as.factor(imputed$Sex)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
Forest1.pred = predict(Forest1)
a = table(imputed$Survived, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
varImpPlot(Forest1)
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
set.seed(2)
numFolds = trainControl(number = 50 )
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
cartGrid = expand.grid( .cp = seq(0.1,0.2,0.002))
train(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
cartGrid = expand.grid( .cp = seq(0,1,0.05))
train(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
cartGrid = expand.grid( .cp = seq(0.2,0.4,0.005))
train(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
Tree1 = rpart(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed, cp = 0.345)
Tree1.pred = predict(Tree1)
a = table(imputed$Survived, Tree1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
a = table(imputed$Survived, Tree1.pred)
Tree1.pred
a = table(imputed$Survived, Tree1.pred[,2])
(a[1,1]+a[2,2])/sum(a) #accuracy
0.7894461
prediction3 <- predict(Forest1, newdata=test, type = "class")
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = prediction3)
test$Sex = as.factor(test$Sex)
prediction3 <- predict(Forest1, newdata=test, type = "class")
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = prediction3)
write.csv(solution3, file = 'model4_Solution.csv', row.names = F)
prediction3
imputed.test = complete(mice(test,m=5,maxit=50,meth='pmm',seed=500))
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
imputed.test = complete(mice(test,m=5,maxit=50,meth='pmm',seed=500))
imputed$Survived = as.factor(imputed$Survived)
imputed$Sex = as.factor(imputed$Sex)
test$Sex = as.factor(test$Sex)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
Forest1.pred = predict(Forest1)
a = table(imputed$Survived, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
varImpPlot(Forest1)
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
prediction3 <- predict(Forest1, newdata=test, type = "class")
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = prediction3)
write.csv(solution3, file = 'model4_Solution.csv', row.names = F)
#####################################################################
prediction3
table(prediction3)
summary(prediction3)
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
imputed.test = complete(mice(test,m=5,maxit=50,meth='pmm',seed=500))
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
imputed.test = complete(mice(test,m=5,maxit=50,meth='pmm',seed=500))
imputed$Survived = as.factor(imputed$Survived)
imputed$Sex = as.factor(imputed$Sex)
test$Sex = as.factor(test$Sex)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
Forest1.pred = predict(Forest1)
a = table(imputed$Survived, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
varImpPlot(Forest1)
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
prediction3 <- predict(Forest1, newdata=imputed.test, type = "class")
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = prediction3)
write.csv(solution3, file = 'model4_Solution.csv', row.names = F)
#####################################################################
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
imputed.test = complete(mice(test,m=5,maxit=50,meth='pmm',seed=500))
imputed$Survived = as.factor(imputed$Survived)
imputed$Sex = as.factor(imputed$Sex)
imputed.test$Sex = as.factor(imputed.test$Sex)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
Forest1.pred = predict(Forest1)
a = table(imputed$Survived, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
varImpPlot(Forest1)
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
prediction3 <- predict(Forest1, newdata=imputed.test, type = "class")
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = prediction3)
write.csv(solution3, file = 'model4_Solution.csv', row.names = F)
#####################################################################
train = read.csv("train.csv", stringsAsFactors = F)
test = read.csv("test.csv", stringsAsFactors = F)
library(randomForest)
library(ROCR)
library(mice)
library(caret)
library(e1071)
imputed = complete(mice(train,m=5,maxit=50,meth='pmm',seed=500))
imputed.test = complete(mice(test,m=5,maxit=50,meth='pmm',seed=500))
imputed$Survived = as.factor(imputed$Survived)
imputed$Sex = as.factor(imputed$Sex)
imputed.test$Sex = as.factor(imputed.test$Sex)
Forest1 = randomForest(Survived ~ Age + Sex + SibSp + Parch + Fare, data = imputed)
Forest1.pred = predict(Forest1)
a = table(imputed$Survived, Forest1.pred)
(a[1,1]+a[2,2])/sum(a) #accuracy
varImpPlot(Forest1)
vu = varUsed(Forest1, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(Forest1$forest$xlevels[vusorted$ix]))
prediction3 <- predict(Forest1, newdata=imputed.test, type = "class")
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = as.numeric(prediction3))
write.csv(solution3, file = 'model4_Solution.csv', row.names = F)
#####################################################################
prediction3 <- predict(Forest1, newdata=imputed.test, type = "class")
solution3 <- data.frame(PassengerID = test$PassengerId, Survived = as.numeric(prediction3)-1)
write.csv(solution3, file = 'model4_Solution.csv', row.names = F)
